## importing files
import random
import pygame
from pygame.locals import *
from customcolors import *
from pygame import mixer

## importing game files
from Space_Invaders_2_Game_Classes import *
from Space_Invaders_2_Game_Functions import *

## setting up pygame, it's screen, caption, and clock
pygame.init()
screen = pygame.display.set_mode((480,480))
pygame.display.set_caption('Space Invaders')
clock = pygame.time.Clock()                         

## setting up the game play
def MainGame():

    ## The Game Loop
    while True:
## setting up the menu 1
        ## setting up the words and messages
        please_select_message = Words_And_Phrases(140,140,'PLEASE SELECT')
        one_or_two_players_message = Words_And_Phrases(120,180,'<1 OR 2 PLAYERS>')
        one_player_message = Words_And_Phrases(190,220,'1PLAYER')
        two_player_message = Words_And_Phrases(190,260,'2PLAYER')

        ## setting up the select asterisk
        asterisk = Words_And_Phrases(170,220,'*')

        ## setting up the important credit message
        credit_message = Words_And_Phrases(340,456,'CREDIT 00')

        ## setting up the flag variable to begin the game
        Player_Selected = False

        ## setting up the mode variable
        Flag_Game_Mode = 'one_player'

        ## setting up the player's score and the high score
        score_message = Words_And_Phrases(45,20,'SCORE<1> HI-SCORE SCORE<2>')
        player_1_score = Words_And_Phrases(60,60,[0,0,0,0])
        player_2_score = Words_And_Phrases(320,60,[0,0,0,0])
        high_score = Words_And_Phrases(200,60,[0,0,0,0])

        while True:
            screen.fill(black)

            ## drawing the player's score
            score_message.Draw()
            player_1_score.Draw()
            player_2_score.Draw()
            high_score.Draw()
            credit_message.Draw()

            ## drawing the phrases
            please_select_message.Draw()
            one_or_two_players_message.Draw()
            one_player_message.Draw()
            two_player_message.Draw()
            asterisk.Draw()

            ## basic key functions
            for event in pygame.event.get():
                if event.type == QUIT:
                    pygame.quit()
                    exit()

                if event.type == KEYDOWN:
                    if event.key == K_DOWN:
                        ## changing the asterik's position resetting the game mode
                        asterisk.ypos = 260
                        Flag_Game_Mode = 'two_player'

                    elif event.key == K_UP:
                        ## changing the asterik's position resetting the game mode
                        asterisk.ypos = 220
                        Flag_Game_Mode = 'one_player'

                    elif event.key == K_RETURN:
                        Player_Selected = True
                        
            pygame.display.update()
            clock.tick(60)
            if Player_Selected == True:
                break

## setting up the menu 2
        ## flag skip variable
        Flag_Skip = False

        ## emptying the screen
        screen.fill(black)
        
        # drawing the player's score and high score
        score_message.Draw()
        player_1_score.Draw()
        player_2_score.Draw()
        high_score.Draw()
        credit_message.Draw()

        # setting up and drawing the words and messages
        play_message = Words_And_Phrases(210,150,'PLA')
        play_message.Draw(6)

        y_message = Words_And_Phrases(255,150,['yflip'])
        y_message.Draw(6)

        Space_Invaders_message = Words_And_Phrases(135,190,'SPACE INVADERS')
        Space_Invaders_message.Draw(6)

        Pause(0.5)

        ## drawing the score_advance_table
        score_advance_table = Words_And_Phrases(80,250,'*SCORE ADVANCE TABLE*')
        score_advance_table.Draw()

        ## drawing the alien display only if the player hasn't skipped
        if Flag_Skip == False:
            mystery_ship_display = Mystery_Ship(144,285)
            mystery_ship_display.Draw()
                
            alien_3_display = Alien(153,320,3,1)
            alien_3_display.Draw('white')

            alien_1_display = Alien(150,355,1,1)
            alien_1_display.Draw('white')

            alien_2_display = Alien(150,390,2,1)
            alien_2_display.Draw('white')

        ## drawing the alien values
        mystery_point_message = Words_And_Phrases(180,285,'=? MYSTERY')
        mystery_point_message.Draw(6)
        
        thirty_points_message = Words_And_Phrases(180,320,'=30 POINTS')
        thirty_points_message.Draw(6)

        twenty_points_message = Words_And_Phrases(180,355,'=20 POINTS')
        twenty_points_message.Draw(6)

        ten_points_message = Words_And_Phrases(180,390,'=10 POINTS')
        ten_points_message.Draw(6)

    ## setting up the short alien film

        # making the alien
        start_alien = Alien(605,149,3,1)
        start_alien.Speed = -5

        ## moving the alien towards the letter to take it
        while True:

            ## checking if the player decides to skip and the break the loop if that happens
            Close_Or_Skip()
            if Flag_Skip == True or Flag_Skip == 'stage_2':
                if Flag_Skip == True:
                    Fill_Black()
                break

            ## drawing the words
            pygame.draw.rect(screen,black,(0,150,480,15))
            play_message.Draw()
            y_message.Draw()

            ## drawing the alien
            start_alien.Draw()
            start_alien.Move_Alien(True)

            ## checking if the alien reaches the cordinate of 265 where it will take the letter
            if start_alien.xpos == 260:

                ## changing the alien speed
                start_alien.Speed = 5

                pygame.display.update()
                clock.tick(30)
                break

            pygame.display.update()
            clock.tick(30)

        ## moving the alien away from the letter to take it away
        while True:

            ## checking if the player decides to skip and breaking the loop if the skip variable is true
            Close_Or_Skip()
            if Flag_Skip == True or Flag_Skip == 'stage_2':
                if Flag_Skip == True:
                    Fill_Black()
                break
            
            ## drawing the words
            pygame.draw.rect(screen,black,(0,150,480,15))
            play_message.Draw()

            ## drawing the alien
            start_alien.Draw_Letter_Take()
            start_alien.Move_Alien(True)

            ## checking if the alien reaches the cordinate of 600 where it will flip the letter
            if start_alien.xpos == 600:

                ## changing the alien speed
                start_alien.Speed = -5

                pygame.display.update()
                clock.tick(30)
                break

            pygame.display.update()
            clock.tick(30)

        ## moving the alien towards the letter to replace it
        while True:
            ## checking if the player decides to skip and breaking the loop if the skip variable is true
            Close_Or_Skip()
            if Flag_Skip == True or Flag_Skip == 'stage_2':
                if Flag_Skip == True:
                    Fill_Black()
                break

            ## drawing the words
            pygame.draw.rect(screen,black,(0,150,480,15))
            play_message.Draw()

            ## drawing the alien
            start_alien.Draw_Letter_Place()

            ## checking if the alien reaches the cordinate of 260 where it place the flipped letter
            if start_alien.xpos == 260:

                # flipping the letter
                y_message = Words_And_Phrases(255,150,'Y')

                ## changing the alien speed
                start_alien.Speed = 5

                pygame.display.update()
                clock.tick(30)
                break

            ## moving the alien
            start_alien.Move_Alien(True)

            pygame.display.update()
            clock.tick(30)
        
        ## moving the alien away from the letter
        while True:

            ## breaking the loop if the skip variable is true
            Close_Or_Skip()
            if Flag_Skip == True or Flag_Skip == 'stage_2':
                if Flag_Skip == True:
                    Fill_Black()
                break

            ## drawing the words
            pygame.draw.rect(screen,black,(0,150,480,15))
            play_message.Draw()
            y_message.Draw()

            ## drawing the alien
            start_alien.Move_Alien(True)
            start_alien.Draw()

            ## checking if the alien reaches the cordinate of 600 and ending the loop
            if start_alien.xpos == 600:
                pygame.display.update()
                clock.tick(30)
                break

            pygame.display.update()
            clock.tick(30)

        ## deleting the start alien from no use
        del start_alien
        
    ## checking if the player hasn't skipped and setting up the menu 3 and menu 4
        if Flag_Skip == False:

        ## setting up the menu 3

            ## filling the screen black quickly but not directly
            Fill_Black()

            ## drawing the scores
            score_message.Draw()
            player_1_score.Draw()
            player_2_score.Draw()
            high_score.Draw()
            credit_message.Draw()

            ## drawing the buttons
            push_message = Words_And_Phrases(210,180,'PUSH')
            push_message.Draw()

            ## drawing the message describing the one player buttons used
            if Flag_Game_Mode == 'one_player':
                only_one_player_button_message = Words_And_Phrases(90,230,'ONLY 1 PLAYER BUTTON')
                only_one_player_button_message.Draw()

            ## drawing the message describing the two player buttons used
            elif Flag_Game_Mode == 'two_player':
                only_two_player_button_message = Words_And_Phrases(127,230,'2 PLAYER BUTTON')
                only_two_player_button_message.Draw()
            
            ## updating the screen only without the flagskip variable
            pygame.display.update()
            Pause(2)

    
        ## setting up menu 4
            ## filling the screen black quickly but not directly
            Fill_Black()

            for time in range(1,30):
                screen.fill(black)

                ## checking if the player decides to skip and breaking from the for loop if it happened
                Close_Or_Skip()
                if Flag_Skip == True or Flag_Skip == 'stage_2':
                    if Flag_Skip == True:
                        Fill_Black()
                    break

                if Flag_Game_Mode == 'one_player':
                    ## drawing the play player 1 message and blinking the player 1 score
                    play_one_player_message = Words_And_Phrases(135,180,'PLAY PLAYER<1>')
                    play_one_player_message.Draw()
                    if time%2 == 0:
                        player_1_score.Draw()

                if Flag_Game_Mode == 'two_player':
                    ## drawing the play player 2 message and blinking the player 1 and the player 2 score 
                    play_two_player_message = Words_And_Phrases(135,220,'PLAY PLAYER<2>')
                    play_two_player_message.Draw()
                    if time%2 == 0:
                        player_2_score.Draw()
                        player_1_score.Draw()
                else:
                    player_2_score.Draw()

                ## drawing the rest of the score info and the credit message
                score_message.Draw()
                high_score.Draw()
                credit_message.Draw()

                pygame.display.update()
                clock.tick(15)

        ## ending the flag skip
        Flag_Skip = 'done'

        ## changing the credit's xpos if the player mode is 2 player
        if Flag_Game_Mode == 'two_player':
            credit_message.xpos = 173

## setting up the elements
        ## setting up the Flag Game Level and Gameover FLag Variable
        Flag_Game_Level = [1,5]
        Flag_Gameover = False

        ## setting up the player, their backup, and their live 
        player_1 = None
        player_2 = None
        player_1_backup = []
        player_2_backup = []
        player_1_life = Words_And_Phrases(10,456,[])
        player_2_life = Words_And_Phrases(460,456,[])

        if Flag_Game_Mode == 'one_player' or Flag_Game_Mode == 'two_player':
            player_1 = Player(50,400)
            player_1_backup = [Player(30,450),Player(70,450)]
            player_1_life.phrase = [2]
        if Flag_Game_Mode == 'two_player':
            player_2 = Player(90,400)
            player_2_backup = [Player(420,450),Player(380,450)]
            player_2_life.phrase = [2]
            
        aliens = []
        Fill_Alien()

        ## alien attributes
        Alien_Explosion_List = []

        ## setting up the Mystery_Ship
        mystery_ship = Mystery_Ship(2500,40)
        Mystery_Ship_Explosion_List = []
        
        ## setting up the Barrier layout
        Barrier_layout = [[0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
                        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0],
                        [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
                        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
                        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
                        [1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1]]

        ## setting up the Barrier and alien invasion line
        Barrier1 = []
        Barrier2 = []
        Barrier3 = []
        Barrier4 = []
        alien_invasion_line = []
        Barrier_Refill()

        ## setting up the bullet lists
        player_1_bullets = []
        player_2_bullets = []
        alien_bullets = []
        Bullet_Explosion_List = []
        
    # setting up the screen
        Fill_Black()
        Screen_Draw(True)

    ## starting the game
        while True:
            screen.fill(black)

        ## moving the player
            if player_1 != None:
                player_1.Move_Player()
            if player_2 != None:
                player_2.Move_Player()

        ## moving the mystery ship
            mystery_ship.Move_Mystery_Ship()
            mystery_ship.Play_Sound()

        ## moving aliens and changing animations only if there is at least one alien on the screen
            if len(Alien_Explosion_List) == 0:
                Alien.Timer = Alien.Timer - 1
                if  Alien.Timer <= 0:
                    Alien.Timer = 20

                    ## changing the aliens' animation
                    Alien.Change_Animation()

                    ## moving the aliens down whenever the aliens reach a side
                    if Alien.Flag_Collide_Side != None:
                        for alien in aliens:
                            alien.Move_Down()
                            alien.Shoot()
                            alien.Check()

                        ## checking the requirements to generate new aliens
                        if Flag_Game_Level == [1,4] or Flag_Game_Level == [1,5]:

                            ## generating the upper range based on the level
                            if Flag_Game_Level == [1,4]:
                                upper_range = len(aliens) - 13
                            elif Flag_Game_Level == [1,5]:
                                upper_range = len(aliens) - 17

                            ## iterating through the aliens list
                            for iteration in range(len(aliens) - 1,upper_range,-1):

                                ## adding the new alien to the game
                                aliens[iteration].Copy_Alien()

                    ## moving the aliens regularly
                    elif Alien.Flag_Collide_Side == None:
                        for alien in aliens:
                            alien.Move_Alien()
                            alien.Shoot()
                            alien.Check()
                    
                ## playing the background music of the alien movement
                    mixer.music.load(Game_Element.Basic_Sound_Url+'background sound '+str(Alien.Counter_Background_Sound)+'.wav')
                    mixer.music.play()
                    Alien.Counter_Background_Sound = Alien.Counter_Background_Sound + 1
                    if Alien.Counter_Background_Sound == 5:
                        Alien.Counter_Background_Sound = 1

        ## moving the alien bullets
            alien_bullet_Iteration_Counter = 0
            while True:
                if alien_bullet_Iteration_Counter >= len(alien_bullets):
                    break
                alien_bullets_length = len(alien_bullets)
                alien_bullets[alien_bullet_Iteration_Counter].Move_Alien_Bullet()
                alien_bullets[alien_bullet_Iteration_Counter].Check()
                if len(alien_bullets) == alien_bullets_length:
                    alien_bullet_Iteration_Counter = alien_bullet_Iteration_Counter + 1

        ## moving the player bullets
            for bullet in player_1_bullets:
                bullet.Move_Bullet()
                bullet.Check()
            for bullet in player_2_bullets:
                bullet.Move_Bullet()
                bullet.Check()

        ## updating the alien dead timer
            Alien_Explosion_Iteration_Counter = 0
            while True:
                if Alien_Explosion_Iteration_Counter == len(Alien_Explosion_List):
                    break
                Alien_Explosion_Length = len(Alien_Explosion_List)
                Alien_Explosion_List[Alien_Explosion_Iteration_Counter].Update_Timer()
                if Alien_Explosion_Length == len(Alien_Explosion_List):
                    Alien_Explosion_Iteration_Counter = Alien_Explosion_Iteration_Counter + 1
            
            Mystery_Ship_Explosion_Iteration_Counter = 0
            while True:
                if Mystery_Ship_Explosion_Iteration_Counter == len(Mystery_Ship_Explosion_List):
                    break
                Mystery_Ship_Explosion_Length = len(Mystery_Ship_Explosion_List)
                Mystery_Ship_Explosion_List[Mystery_Ship_Explosion_Iteration_Counter].Update_Timer()
                if Mystery_Ship_Explosion_Length == len(Mystery_Ship_Explosion_List):
                    Mystery_Ship_Explosion_Iteration_Counter = Mystery_Ship_Explosion_Iteration_Counter + 1
 
            ## The Key Loop
            for event in pygame.event.get():
                ## quit 
                if event.type == QUIT:
                    pygame.quit()
                    exit()
                elif event.type == KEYDOWN:
                    if event.key == K_RIGHT:
                        if player_1 != None:
                            player_1.Flag_Movement_Direction = 'right'
                        else:
                            player_2.Flag_Movement_Direction = 'right'
                    elif event.key == K_LEFT:
                        if player_1 != None:
                            player_1.Flag_Movement_Direction = 'left'
                        else:
                            player_2.Flag_Movement_Direction = 'left'
                    elif event.key == K_a:
                        if player_2 != None:
                            player_2.Flag_Movement_Direction = 'left'
                        else:
                            player_1.Flag_Movement_Direction = 'left'
                    elif event.key == K_d:
                        if player_2 != None:
                            player_2.Flag_Movement_Direction = 'right'
                        else:
                            player_1.Flag_Movement_Direction = 'right'

                ## shooting bullets using space
                    if event.key == K_SPACE:
                        if player_1 != None:
                            if player_1.Shoot_Timer <= 0 and len(player_1_bullets) == 0:
                                player_1.Shoot_Timer = 60
                                player_1.Shoot_Iteration_Counter = player_1.Shoot_Iteration_Counter + 1
                                player_1_bullets.append(Player_Bullet(player_1.xpos + 14,player_1.ypos - 10))


                                ## playing the sound
                                Player.Shoot_Sound.play()
                        else:
                            if player_2.Shoot_Timer <= 0 and len(player_2_bullets) == 0:
                                player_2.Shoot_Iteration_Counter = player_2.Shoot_Iteration_Counter + 1
                                player_2.Shoot_Timer = 60
                                player_2_bullets.append(Player_Bullet(player_2.xpos + 14,player_2.ypos - 10))

                                ## playing the sound
                                Player.Shoot_Sound.play()

                ## shooting bullets using x
                    if event.key == K_x: 
                        if player_2 != None:
                            if player_2.Shoot_Timer <= 0 and len(player_2_bullets) == 0:
                                player_2.Shoot_Timer = 60
                                player_2_bullets.append(Player_Bullet(player_2.xpos + 14,player_2.ypos - 10))

                                ## playing the sound
                                Player.Shoot_Sound.play()
                        else:
                            if player_1.Shoot_Timer <= 0 and len(player_1_bullets) == 0:
                                player_1.Shoot_Timer = 60
                                player_1_bullets.append(Player_Bullet(player_1.xpos + 14,player_1.ypos - 10))

                                ## playing the sound
                                Player.Shoot_Sound.play()


                ## checking if the keys are lifted
                if event.type == KEYUP:
                    if event.key == K_RIGHT:
                        if player_1 != None:
                            if player_1.Flag_Movement_Direction == 'right':
                                player_1.Flag_Movement_Direction = None
                        else:
                            if player_2.Flag_Movement_Direction == 'right':
                                player_2.Flag_Movement_Direction = None
                    elif event.key == K_LEFT:
                        if player_1 != None:
                            if player_1.Flag_Movement_Direction == 'left':
                                player_1.Flag_Movement_Direction = None
                        else:
                            if player_2.Flag_Movement_Direction == 'left':
                                player_2.Flag_Movement_Direction = None
                    if event.key == K_a:
                        if player_2 != None:
                            if player_2.Flag_Movement_Direction == 'left':
                                player_2.Flag_Movement_Direction = None
                        else:
                            if player_1.Flag_Movement_Direction == 'left':
                                player_1.Flag_Movement_Direction = None
                    elif event.key == K_d:
                        if player_2 != None:
                            if player_2.Flag_Movement_Direction == 'right':
                                player_2.Flag_Movement_Direction = None
                        else:
                            if player_1.Flag_Movement_Direction == 'right':
                                player_1.Flag_Movement_Direction = None

    ## drawing things 
        ## drawing the alien invasion line
            for Barrier_particle in alien_invasion_line:
                Barrier_particle.Draw()

        ## drawing the score
            score_message.Draw()
            player_1_score.Draw()
            player_2_score.Draw()
            high_score.Draw()            
            player_1_life.Draw()
            player_2_life.Draw()
            credit_message.Draw()

        ## drawing the player
            if player_1 != None:
                player_1.Draw('green')
            if player_2 != None:
                player_2.Draw('blue')
            for player in player_1_backup:
                player.Draw('green')
            for player in player_2_backup:
                player.Draw('blue')
            
        ## drawing the Barriers
            for Barrier_particle in Barrier1:
                Barrier_particle.Draw()
            for Barrier_particle in Barrier2:
                Barrier_particle.Draw()
            for Barrier_particle in Barrier3:
                Barrier_particle.Draw()
            for Barrier_particle in Barrier4:
                Barrier_particle.Draw()
                
        ## drawing the Mystery_Ship
            mystery_ship.Draw()

        ## drawing the aliens
            for alien in aliens:
                if alien.ypos >= 315:
                    alien.Draw('green')
                else:
                    alien.Draw('white')

        ## drawing the Alien_Explosion and Mystery Ship Explosion
            for explosion in Alien_Explosion_List:
                explosion.Draw()
            for explosion in Mystery_Ship_Explosion_List:
                explosion.Draw()
                
        ## drawing the player bullet with the specific color
            for bullet in player_1_bullets:
                if Flag_Game_Mode == 'two_player':
                    bullet.Draw('green')
                else:
                    bullet.Draw('white')
            for bullet in player_2_bullets:
                bullet.Draw('blue')
            
        ## drawing the alien bullets;
            for bullet in alien_bullets:
                bullet.Draw()

        ## updating the player bullet timer
            if Player.Shoot_Timer > 0:
                Player.Shoot_Timer = Player.Shoot_Timer - 1
                
        ##drawing the explosion caused by the player and alien bullets
            bullet_explosion_Iteration_Counter = 0
            while True:
                if bullet_explosion_Iteration_Counter == len(Bullet_Explosion_List):
                    break
                Bullet_Explosion_List[bullet_explosion_Iteration_Counter].Draw()
                Bullet_Explosion_List[bullet_explosion_Iteration_Counter].Explosion_Timer = Bullet_Explosion_List[bullet_explosion_Iteration_Counter].Explosion_Timer - 1
                if Bullet_Explosion_List[bullet_explosion_Iteration_Counter].Explosion_Timer == 0:
                    Bullet_Explosion_List.pop(bullet_explosion_Iteration_Counter)
                else:
                    bullet_explosion_Iteration_Counter = bullet_explosion_Iteration_Counter + 1

        ## updating the windo
            pygame.display.update()
            clock.tick(60)

            ## checking if all the aliens are shot
            if len(aliens) == 0 and len(Alien_Explosion_List) == 0:
                ## emptying all the bullet lists
                alien_bullets = []
                player_1_bullets = []
                player_2_bullets = []

                ## making the players stop
                if player_1 != None:
                    player_1.Flag_Movement_Direction = None
                elif player_2 != None:
                    player_2.Flag_Movement_Direction = None

                ## increasing the level of the game
                Flag_Game_Level[1] = Flag_Game_Level[1] + 1

                ## inreasing the level of the game by the tens place
                if Flag_Game_Level[1] > 9:
                    Flag_Game_Level[0] = Flag_Game_Level[0] + 1
                    Flag_Game_Level[1] = Flag_Game_Level[1] - 10

                ## Refilling Aliens and Barriers
                Fill_Alien()
                Barrier_Refill()

                ## calling screen draw function 
                Screen_Draw()

        ## checking if the players are hit
            if player_1 != None:
                if player_1.Flag_Struck == True:
                    Player_Explode(player_1)

            if player_2 != None:
                if player_2.Flag_Struck == True:
                    Player_Explode(player_2)

        ## ending the game
            if Flag_Gameover == True:
                ## drawing the Game Over Sign
                game_over_message = Words_And_Phrases(180,120,'GAMEOVER')
                game_over_message.Draw()
                pygame.display.update()
                Pause(2)
                break
MainGame()